version: '3.11'


services:
    nginx:
        restart: always
        image: nginx:1.25-alpine
        ports:
            - "80:80"
        volumes:
            - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
            - static_volume:/app/clone_sound_cloud/django_static
    server:
        restart: unless-stopped
        build:
            context: .
            dockerfile: ./docker/backend/Dockerfile
        entrypoint: /app/docker/backend/server-entrypoint.sh
        volumes:
            - static_volume:/app/clone_sound_cloud/django_static
        expose:
            - "8000:8000"
        env_file:
            - .env.docker
        depends_on:
            - elasticsearch
    elasticsearch:
        image: elasticsearch:8.11.0
        volumes:
            - elastic_data:/var/lib/elasticsearch/data/
        environment:
            - xpack.security.enabled=false
            - discovery.type=single-node
        ports:
            - "9200:9200"
    worker:
        restart: unless-stopped
        build:
            context: .
            dockerfile: ./docker/backend/Dockerfile
        entrypoint: /app/docker/backend/worker-entrypoint.sh
        volumes:
            - static_volume:/app/clone_sound_cloud/django_static
        env_file:
            - .env.docker
        depends_on:
            - server
            - redis
    celery-beat:
        restart: unless-stopped
        build:
            context: .
            dockerfile: ./docker/backend/Dockerfile
        entrypoint: /app/docker/backend/celery-beat-entrypoint.sh
        volumes:
            - static_volume:/app/clone_sound_cloud/django_static
        env_file:
            - .env.docker
        depends_on:
            - server
            - redis
            - worker
    redis:
        restart: unless-stopped
        image: redis:7.0.5-alpine
        expose:
            - "6379"
    db:
        image: postgres:15.0-alpine
        restart: unless-stopped
        volumes:
            - postgres_data:/var/lib/postgresql/data/
        env_file:
            - .env.docker
        expose:
            - "5432"
    pgadmin:
        image: dpage/pgadmin4
        container_name: pgadmin4_container
        restart: unless-stopped
        ports:
            - "8888:80"
        env_file:
            - .env.docker
        volumes:
            - pgadmin-data:/var/lib/pgadmin
        depends_on:
            - db

volumes:
    static_volume: {}
    postgres_data: {}
    elastic_data: {}
    pgadmin-data: {}
